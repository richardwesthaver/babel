#+TITLE: babel
* sc
** sh
*** app
#+name: ytdl
#+begin_src sh :var OUT_PATH=""
youtube-dl --no-warnings \
  -o '$OUT_PATH/%(title)s.%(ext)s' \
  --socket-timeout 15 --hls-use-mpegts -R 64 --fragment-retries 64 \
  --prefer-free-formats --all-subs --embed-subs \
  -f 'bestvideo[height<=1080]+bestaudio/best[height<=1080]' "$@" \
  --restrict-filenames
#+end_src

*** dev
**** cargo
#+name: cargo_update_dir
#+begin_src sh :var dir=""
# update all crates in dir
set -eu
case $0 in
   (/*) dir=${0%/*}/;;
   (*/*) dir=./${0%/*};;
   (*) dir=.;;
esac

find "$dir/.." -name Cargo.lock -execdir cargo update \;
#+end_src

#+RESULTS: cargo_update_dir

*** crypto
#+name: wg_genkey
#+begin_src sh
# generate base64-enc keypair in current dir
umask 077
wg genkey | tee privatekey | wg pubkey > publickey
#+end_src
*** rand
#+name: urand_4k_file
#+begin_src sh
# create 4k of random bytes in file
dd if=/dev/urandom of=$@ count=4 bs=1024
#+end_src

#+name: urand_stdout
#+begin_src sh
# generate random numbers to stdout
od -d /dev/urandom
#+end_src

#+name: urand_sha512
#+begin_src sh
# generate hash of 128 random bytes
dd if=/dev/urandom  count=1 bs=128 | sha512sum
#+end_src
*** term
#+name: term_check
#+begin_src sh
stty -a #current settings of all terminal attributes
bind -p #key bindings
infocmp #print out a terminfo description
#+end_src
*** virt
#+name: dd_write_iso
#+begin_src sh :var iso="" :var disk=""
dd bs=4M if=$iso of=$disk conv=fdatasync status=progress
#+end_src
**** qemu
#+name: qemu_init_win10
#+begin_src sh :var boot="win10_x64.iso" :var virt="win10.iso" :var disk="win10.img"
# this script requires an installation ISO (win10_x64.iso), the
# virtio-windows-guest drivers (win10.iso), and a fresh disk image to
# install to (win10.img).
#
# the graphic installer will boot and you then need to load the virtio
# drivers, at which point you can install as usual.
exec qemu-system-x86_64 -enable-kvm \
        -cpu host \
        -cdrom $boot \
        -drive file=$virt,if=virtio \
        -drive file=$disk,index=1,media=cdrom \
        -net nic,model=virtio -net user \
        -vga qxl \
        -m 4G \
        -monitor stdio \
        -name "Windows" \
        "$@"
#+end_src

*** sys
**** systemd
#+name: systemctl_list_units
#+begin_src sh
systemctl list-units --state=running | grep -v systemd | awk '{print $1}' | grep service
#+end_src
**** inotify
#+name: inotify_watch_dir
#+begin_src sh :var path="."
inotifywait -m  $path -e create -e moved_to |
    while read dir action file; do
	echo "The file '$file' appeared in directory '$dir' via '$action'"
    done
#+end_src
*** os
**** macos
#+name: macos_init
#+begin_src sh
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew install openssl cmake
curl https://sh.rustup.rs -sSf | sh
source ~/.cargo/env
#+end_src
** py
*** net
#+name: simple_http_server
#+begin_src python
from http.server import HTTPServer, SimpleHTTPRequestHandler, test
import sys

class RequestHandler(SimpleHTTPRequestHandler):
    def end_headers(self):
        self.send_header('Cross-Origin-Opener-Policy', 'same-origin')
        self.send_header('Cross-Origin-Embedder-Policy', 'require-corp')
        SimpleHTTPRequestHandler.end_headers(self)

if __name__ == '__main__':
    test(RequestHandler, HTTPServer, port=int(sys.argv[1]) if len(sys.argv) > 1 else 8000)
#+end_src

* sn
** mk
*** var
#+name: __default_0
#+begin_src makefile
MAKEFLAGS += --warn-undefined-variables
.DELETE_ON_ERROR:
#+end_src
*** rust
#+name: __rust_triple
#+begin_src makefile
HOST_TRIPLE=$(shell rustc -vV | sed -n -e 's/^host: //p')
#+end_src
*** util
#+name: _list
#+begin_src makefile
_list: #requires xargs awk egrep
	@$(MAKE) -pRrq -f ; \
	$(lastword $(MAKEFILE_LIST)) : \
		2>/dev/null | awk -v RS= -F: \
		'/^# File/,/^# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' \
		| sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$' | xargs
#+end_src
*** demon
#+name: dm_make
#+begin_src makefile
.EXPORT_ALL_VARIABLES:
DEMON:=$(shell echo ${USER} | tr 'A-Za-z' 'N-ZA-Mn-za-m')dm
STAMP:=$(STAMP)

.PHONY: _dmadd _dmkill

_dmadd:useradd $(DEMON) -G demon;\
  mkdir -p $(STAMP)/dm/.h/$(DEMON);\
  chown -R $(DEMON):demon $(STAMP)/dm/.h/$(DEMON);\
  install -C -m 775 -o $(DEMON) -g demon $(STAMP) $(STAMP)/dm/.h/$(DEMON)

_dmkill:userdel -f -r $(DEMON);\
  rm -rf $(STAMP)/dm/.h/$(DEMON)

.DEFAULT_GOAL := #reset default

#+end_src

** rs
*** macro
** js
*** util
#+name: copy_link_id
#+begin_src js
function Copy() {
  var Url = document.getElementById("url_id");
  Url.innerHTML = window.location.href;
  console.log(Url.innerHTML)
  Url.select();
  document.execCommand("copy");
}
#+end_src
+ example -> \\
  #+begin_src html
<div>
  <input type="button" value="Copy Url" onclick="Copy();" />
  <br /> Paste: <textarea id="url_id" rows="1" cols="30"></textarea>
</div>
  #+end_src
** sh
*** util
**** extract
    #+begin_src sh
extract () {
    if [ -f $1 ] ; then
	case $1 in
	    ,*.tar.bz2)        tar xjf $1        ;;
	    ,*.tar.gz)         tar xzf $1        ;;
	    ,*.bz2)            bunzip2 $1        ;;
	    ,*.rar)            unrar x $1        ;;
	    ,*.gz)             gunzip $1         ;;
	    ,*.tar)            tar xf $1         ;;
	    ,*.tbz2)           tar xjf $1        ;;
	    ,*.tgz)            tar xzf $1        ;;
	    ,*.zip)            unzip $1          ;;
	    ,*.Z)              uncompress $1     ;;
	    ,*.7z)             7zr e $1          ;;
	    ,*)                echo "'$1' cannot be extracted via extract()" ;;
	esac
    else
	echo "'$1' is not a valid file"
    fi
}
    #+end_src
** org
** el
*** util
**** make-dot-tree
#+name: make-dot-tree
#+begin_src emacs-lisp :var table=() :results output :exports none
  (mapcar #'(lambda (x)
                (princ (format "\"%s\" -> \"%s\";\n" (cl-first x) (cl-second x))))
          table)
#+end_src
**** gen-dot-tree
#+name: gen-dot-tree
#+begin_src dot :file tree.png :cmdline -Kdot -Tpng :var input=make-dot :exports results
digraph {
   rankdir=TB;
   splines=true;
   node [shape=box];
   $input
  }
#+end_src

*** org
**** org-headlines-map
#+name: org-headlines-map
#+begin_src elisp
  (org-element-map (org-element-parse-buffer 'headline )
      'headline
    (lambda(hl)
      (let ((parent (org-element-property :parent hl )))
        (and (eq (org-element-type parent) 'headline)
             (list (org-element-property :title parent) (org-element-property :title hl))))))

#+end_src
** py
** c
** cpp
* tm
** crate
*** bin
**** Cargo.toml
#+begin_src toml :var name="_bin"
[package]
name = "$name"
version = "0.1.0"
edition = "2021"

[dependencies]
#+end_src
**** rustfmt.toml
#+begin_src toml
edition = "2021"
reorder_imports = true
reorder_modules = true
tab_spaces = 2
use_field_init_shorthand = true
use_try_shorthand = true
#+end_src
**** src/main.rs
#+begin_src rust
fn main() {
  
}
#+end_src
*** lib
**** Cargo.toml
#+begin_src toml :var name="_lib"
[package]
name = "$name"
version = "0.1.0"
edition = "2021"

[dependencies]
#+end_src
**** src/lib.rs
#+begin_src rust
#+end_src
*** mod-bin
**** Cargo.toml
#+begin_src toml :var name="_mod"
[package]
name = "$name"
version = "0.1.0"
edition = "2021"

[[bin]]
path = "main.rs"

[dependencies]
#+end_src
**** main.rs
#+begin_src rust
fn main() {}
#+end_src
*** mod-lib
**** Cargo.toml
#+begin_src toml :var name="_mod"
[package]
name = "$name"
version = "0.1.0"
edition = "2021"

[[lib]]
path = "lib.rs"

[dependencies]
#+end_src
**** lib.rs
#+begin_src rust
#+end_src
*** app
**** Cargo.toml
#+begin_src toml :var name="_app"
[package]
name = "$name"
version = "0.1.0"
edition = "2021"

[dependencies]
rlib = "0.1.0"
tenex = "0.1.0"
#+end_src
**** src/main.rs
#+begin_src rust
use rlib::ctx;

#[ctx::main]
async fn main() {}
#+end_src
* ak
# auto keys
#+begin_src emacs-lisp
#+end_src
