 #+TITLE: babel
#+SETUP_FILE: ~/shed/src/meta/ox.setup
#+PROPERTY: header-args :eval never-export
* snippet
** rust-target-triple
 #+name: rust-target-triple
 #+begin_src shell
 rustc -vV | sed -n -e 's/^host: //p'
 #+end_src

** make-header
#+name: make-header
#+begin_src makefile
MAKEFLAGS += --warn-undefined-variables
.DELETE_ON_ERROR:
#+end_src
** make-list
 #+name: make-list
 #+begin_src makefile
 _list: #requires xargs awk egrep
	 @$(MAKE) -pRrq -f ; \
	 $(lastword $(MAKEFILE_LIST)) : \
		 2>/dev/null | awk -v RS= -F: \
		 '/^# File/,/^# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' \
		 | sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$' | xargs
 #+end_src
** make-demon
 #+name: make-demon
 #+begin_src makefile
 .EXPORT_ALL_VARIABLES:
 DEMON:=$(shell echo ${USER} | tr 'A-Za-z' 'N-ZA-Mn-za-m')dm
 STAMP:=$(STAMP)

 .PHONY: _dmadd _dmkill

 _dmadd:useradd $(DEMON) -G demon;\
   mkdir -p $(STAMP)/dm/.h/$(DEMON);\
   chown -R $(DEMON):demon $(STAMP)/dm/.h/$(DEMON);\
   install -C -m 775 -o $(DEMON) -g demon $(STAMP) $(STAMP)/dm/.h/$(DEMON)

 _dmkill:userdel -f -r $(DEMON);\
   rm -rf $(STAMP)/dm/.h/$(DEMON)

 .DEFAULT_GOAL := #reset default

 #+end_src

** js-copy-link-id
#+name: copy-link-id
#+begin_src js
function Copy() {
  var Url = document.getElementById("url_id");
  Url.innerHTML = window.location.href;
  console.log(Url.innerHTML)
  Url.select();
  document.execCommand("copy");
}
#+end_src

+ example -- \\
  #+begin_src html
<div>
  <input type="button" value="Copy Url" onclick="Copy();" />
  <br /> Paste: <textarea id="url_id" rows="1" cols="30"></textarea>
</div>
  #+end_src
** extract
#+name: extract(f)
#+begin_src sh
    if [ -f $f ] ; then
	case $f in
	    ,*.tar.bz2)        tar xjf $f        ;;
	    ,*.tar.gz)         tar xzf $f        ;;
	    ,*.bz2)            bunzip2 $f       ;;
	    ,*.rar)            unrar x $f        ;;
	    ,*.gz)             gunzip $f         ;;
	    ,*.tar)            tar xf $f         ;;
	    ,*.tbz2)           tar xjf $f        ;;
	    ,*.tgz)            tar xzf $f        ;;
	    ,*.zip)            unzip $f          ;;
	    ,*.Z)              uncompress $f     ;;
	    ,*.7z)             7zr e $f          ;;
	    ,*)                echo "'$f' cannot be extracted via extract()" ;;
	esac
    else
	echo "'$f' is not a valid file"
    fi
#+end_src
** git-clone
#+name: git-clone(src)
#+begin_src sh :results silent
  git clone $src
#+end_src
** hg-clone
#+name: hg-clone
#+begin_src sh :var remote=() :results silent
hg clone $remote
#+end_src
** hg-rev
#+name: hg-rev
#+begin_src sh :var path="."
cd $path && hg log -l 1 --template '{node|short}'
#+end_src

#+RESULTS: hg-rev
: 7cd72295e748
** hg-id-num
#+name: hg-id-num
#+begin_src sh :var path="."
cd $path && hg id -n
#+end_src

** hg-log-age
#+name: hg-log-age
#+begin_src sh :results output
  hg log -l1 --template "{date|age}"
#+end_src
** tokei-json
#+name: tokei-json
#+begin_src shell :wrap src js :results raw
tokei -o json
#+end_src

#+RESULTS: tokei-json
#+begin_src js
{"Emacs Lisp":{"blanks":62,"children":{},"code":394,"comments":86,"inaccurate":false,"reports":[{"name":"./babel.el","stats":{"blanks":26,"blobs":{},"code":148,"comments":40}},{"name":"./sc/lisp/shed.el","stats":{"blanks":33,"blobs":{},"code":199,"comments":46}},{"name":"./o/sc/elisp/publish.el","stats":{"blanks":3,"blobs":{},"code":47,"comments":0}}]},"Haskell":{"blanks":6,"children":{},"code":26,"comments":10,"inaccurate":false,"reports":[{"name":"./sc/monads.hs","stats":{"blanks":3,"blobs":{},"code":13,"comments":5}},{"name":"./o/sc/monads.hs","stats":{"blanks":3,"blobs":{},"code":13,"comments":5}}]},"Makefile":{"blanks":12,"children":{},"code":16,"comments":3,"inaccurate":false,"reports":[{"name":"./makefile","stats":{"blanks":4,"blobs":{},"code":7,"comments":1}},{"name":"./sc/makefile","stats":{"blanks":8,"blobs":{},"code":9,"comments":2}}]},"Org":{"blanks":554,"children":{},"code":7454,"comments":50,"inaccurate":false,"reports":[{"name":"./lob.org","stats":{"blanks":48,"blobs":{},"code":581,"comments":9}},{"name":"./sc/cv.org","stats":{"blanks":4,"blobs":{},"code":81,"comments":0}},{"name":"./sc/index.org","stats":{"blanks":8,"blobs":{},"code":88,"comments":0}},{"name":"./readme.org","stats":{"blanks":11,"blobs":{},"code":56,"comments":1}},{"name":"./sc/readme.org","stats":{"blanks":25,"blobs":{},"code":214,"comments":2}},{"name":"./sc/m.org","stats":{"blanks":85,"blobs":{},"code":990,"comments":1}},{"name":"./o/lob.org","stats":{"blanks":29,"blobs":{},"code":316,"comments":11}},{"name":"./sc/n.org","stats":{"blanks":344,"blobs":{},"code":5128,"comments":26}}]},"PowerShell":{"blanks":0,"children":{},"code":6,"comments":4,"inaccurate":false,"reports":[{"name":"./sc/powershell/win-dlx-bitsadmin.ps1","stats":{"blanks":0,"blobs":{},"code":1,"comments":1}},{"name":"./sc/powershell/win-dlbin64-certutil.ps1","stats":{"blanks":0,"blobs":{},"code":1,"comments":1}},{"name":"./sc/powershell/nbd-firewall-rule.ps1","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}},{"name":"./o/sc/powershell/win-dlx-bitsadmin.ps1","stats":{"blanks":0,"blobs":{},"code":1,"comments":1}},{"name":"./o/sc/powershell/win-dlbin64-certutil.ps1","stats":{"blanks":0,"blobs":{},"code":1,"comments":1}},{"name":"./o/sc/powershell/nbd-firewall-rule.ps1","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}}]},"Python":{"blanks":204,"children":{},"code":868,"comments":106,"inaccurate":false,"reports":[{"name":"./sc/sm_scrape.py","stats":{"blanks":9,"blobs":{},"code":34,"comments":2}},{"name":"./sc/hackrf.py","stats":{"blanks":33,"blobs":{},"code":123,"comments":17}},{"name":"./sc/org.py","stats":{"blanks":11,"blobs":{},"code":48,"comments":1}},{"name":"./o/sc/org.py","stats":{"blanks":11,"blobs":{},"code":48,"comments":1}},{"name":"./sc/fm_radio_rx.py","stats":{"blanks":20,"blobs":{},"code":166,"comments":15}},{"name":"./o/sc/fm_radio_rx.py","stats":{"blanks":20,"blobs":{},"code":166,"comments":15}},{"name":"./o/sc/sm_scrape.py","stats":{"blanks":9,"blobs":{},"code":34,"comments":2}},{"name":"./o/sc/hackrf.py","stats":{"blanks":33,"blobs":{},"code":123,"comments":17}},{"name":"./sc/build-efi.py","stats":{"blanks":29,"blobs":{},"code":63,"comments":18}},{"name":"./o/sc/build-efi.py","stats":{"blanks":29,"blobs":{},"code":63,"comments":18}}]},"Rust":{"blanks":61,"children":{"Markdown":[{"name":"./sc/src/coding.rs","stats":{"blanks":0,"blobs":{},"code":0,"comments":1}},{"name":"./sc/src/web/client.rs","stats":{"blanks":0,"blobs":{},"code":0,"comments":4}},{"name":"./sc/src/web/server.rs","stats":{"blanks":0,"blobs":{},"code":0,"comments":4}},{"name":"./sc/src/daemon.rs","stats":{"blanks":0,"blobs":{},"code":0,"comments":1}},{"name":"./sc/src/lib.rs","stats":{"blanks":0,"blobs":{},"code":0,"comments":1}},{"name":"./sc/src/bin/shs.rs","stats":{"blanks":0,"blobs":{},"code":0,"comments":1}},{"name":"./sc/src/bin/shd.rs","stats":{"blanks":0,"blobs":{},"code":0,"comments":1}},{"name":"./sc/src/bin/shc.rs","stats":{"blanks":0,"blobs":{},"code":0,"comments":1}},{"name":"./sc/build.rs","stats":{"blanks":0,"blobs":{},"code":0,"comments":1}},{"name":"./sc/src/web.rs","stats":{"blanks":1,"blobs":{},"code":0,"comments":14}},{"name":"./sc/src/config.rs","stats":{"blanks":0,"blobs":{},"code":0,"comments":2}},{"name":"./sc/src/cli.rs","stats":{"blanks":0,"blobs":{},"code":0,"comments":1}},{"name":"./sc/src/app.rs","stats":{"blanks":0,"blobs":{},"code":0,"comments":14}}]},"code":889,"comments":51,"inaccurate":false,"reports":[{"name":"./sc/src/coding.rs","stats":{"blanks":6,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":30,"comments":4}},{"name":"./sc/src/web/client.rs","stats":{"blanks":1,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":4}},"code":7,"comments":5}},{"name":"./sc/src/web/server.rs","stats":{"blanks":3,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":4}},"code":26,"comments":5}},{"name":"./sc/src/crypto.rs","stats":{"blanks":0,"blobs":{},"code":0,"comments":0}},{"name":"./sc/src/store.rs","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}},{"name":"./sc/src/stash.rs","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}},{"name":"./sc/src/daemon.rs","stats":{"blanks":2,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":11,"comments":0}},{"name":"./sc/src/lib.rs","stats":{"blanks":4,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":7,"comments":17}},{"name":"./sc/src/bin/shk.rs","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}},{"name":"./sc/src/bin/shx.rs","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}},{"name":"./sc/src/bin/shs.rs","stats":{"blanks":1,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":6,"comments":0}},{"name":"./sc/src/bin/shd.rs","stats":{"blanks":1,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":6,"comments":0}},{"name":"./sc/src/bin/shc.rs","stats":{"blanks":3,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":10,"comments":1}},{"name":"./sc/build.rs","stats":{"blanks":4,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":20,"comments":7}},{"name":"./sc/src/web.rs","stats":{"blanks":11,"blobs":{"Markdown":{"blanks":1,"blobs":{},"code":0,"comments":14}},"code":94,"comments":0}},{"name":"./sc/src/config.rs","stats":{"blanks":7,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":2}},"code":78,"comments":0}},{"name":"./sc/src/cli.rs","stats":{"blanks":0,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":165,"comments":0}},{"name":"./sc/src/app.rs","stats":{"blanks":18,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":14}},"code":425,"comments":12}}]},"Shell":{"blanks":492,"children":{},"code":2547,"comments":621,"inaccurate":false,"reports":[{"name":"./sc/check_term_colors.sh","stats":{"blanks":0,"blobs":{},"code":6,"comments":1}},{"name":"./sc/setup-monitors.sh","stats":{"blanks":0,"blobs":{},"code":1,"comments":1}},{"name":"./sc/hg-export-bundle.sh","stats":{"blanks":1,"blobs":{},"code":8,"comments":2}},{"name":"./sc/set_bg.sh","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}},{"name":"./sc/arch-chroot.sh","stats":{"blanks":11,"blobs":{},"code":45,"comments":6}},{"name":"./sc/hg-export-github.sh","stats":{"blanks":1,"blobs":{},"code":12,"comments":6}},{"name":"./sc/wg-gen-keys.sh","stats":{"blanks":0,"blobs":{},"code":2,"comments":2}},{"name":"./sc/set-version.sh","stats":{"blanks":5,"blobs":{},"code":18,"comments":5}},{"name":"./sc/port-scan.sh","stats":{"blanks":8,"blobs":{},"code":45,"comments":2}},{"name":"./sc/hg-unbundle.sh","stats":{"blanks":0,"blobs":{},"code":8,"comments":4}},{"name":"./sc/nfs-re-export.sh","stats":{"blanks":0,"blobs":{},"code":2,"comments":1}},{"name":"./sc/hg-pull.sh","stats":{"blanks":4,"blobs":{},"code":11,"comments":6}},{"name":"./sc/qemu-init-win10.sh","stats":{"blanks":0,"blobs":{},"code":11,"comments":8}},{"name":"./sc/record_gif.sh","stats":{"blanks":0,"blobs":{},"code":3,"comments":2}},{"name":"./sc/hg-bundle.sh","stats":{"blanks":6,"blobs":{},"code":25,"comments":5}},{"name":"./sc/gen_rust_docs.sh","stats":{"blanks":3,"blobs":{},"code":11,"comments":2}},{"name":"./sc/add-demon.sh","stats":{"blanks":2,"blobs":{},"code":12,"comments":1}},{"name":"./sc/fuzz.sh","stats":{"blanks":6,"blobs":{},"code":27,"comments":3}},{"name":"./o/sc/archiso/repoctl-upgrade.sh","stats":{"blanks":2,"blobs":{},"code":12,"comments":2}},{"name":"./o/sc/archiso/test.sh","stats":{"blanks":6,"blobs":{},"code":26,"comments":21}},{"name":"./o/sc/iso-write.sh","stats":{"blanks":0,"blobs":{},"code":3,"comments":1}},{"name":"./sc/pipes.sh","stats":{"blanks":45,"blobs":{},"code":256,"comments":83}},{"name":"./o/sc/wg-gen-keys.sh","stats":{"blanks":0,"blobs":{},"code":2,"comments":2}},{"name":"./sc/rust_docs_bootstrap_frontend.sh","stats":{"blanks":14,"blobs":{},"code":72,"comments":2}},{"name":"./o/sc/set-version.sh","stats":{"blanks":5,"blobs":{},"code":18,"comments":5}},{"name":"./o/sc/hg-unbundle.sh","stats":{"blanks":0,"blobs":{},"code":8,"comments":4}},{"name":"./o/sc/port-scan.sh","stats":{"blanks":8,"blobs":{},"code":45,"comments":2}},{"name":"./o/sc/archiso/first-run.sh","stats":{"blanks":1,"blobs":{},"code":1,"comments":2}},{"name":"./o/sc/archiso/provision.sh","stats":{"blanks":8,"blobs":{},"code":23,"comments":1}},{"name":"./o/sc/archiso/mkinit-linux.sh","stats":{"blanks":1,"blobs":{},"code":15,"comments":7}},{"name":"./o/sc/pipes.sh","stats":{"blanks":45,"blobs":{},"code":256,"comments":83}},{"name":"./o/sc/nfs-re-export.sh","stats":{"blanks":0,"blobs":{},"code":2,"comments":1}},{"name":"./o/sc/hg-pull.sh","stats":{"blanks":4,"blobs":{},"code":11,"comments":6}},{"name":"./o/sc/crater-export-github.sh","stats":{"blanks":1,"blobs":{},"code":10,"comments":2}},{"name":"./o/sc/qemu-init-win10.sh","stats":{"blanks":0,"blobs":{},"code":11,"comments":8}},{"name":"./o/sc/record_gif.sh","stats":{"blanks":0,"blobs":{},"code":3,"comments":2}},{"name":"./o/sc/hg-bundle.sh","stats":{"blanks":6,"blobs":{},"code":25,"comments":5}},{"name":"./o/sc/hg-export-bundle.sh","stats":{"blanks":1,"blobs":{},"code":8,"comments":2}},{"name":"./o/sc/connctl.sh","stats":{"blanks":2,"blobs":{},"code":7,"comments":1}},{"name":"./o/sc/check_term_colors.sh","stats":{"blanks":0,"blobs":{},"code":6,"comments":1}},{"name":"./o/sc/setup-monitors.sh","stats":{"blanks":0,"blobs":{},"code":1,"comments":1}},{"name":"./o/sc/set_bg.sh","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}},{"name":"./o/sc/gen_rust_docs.sh","stats":{"blanks":3,"blobs":{},"code":11,"comments":2}},{"name":"./o/sc/archiso/mkinit.sh","stats":{"blanks":45,"blobs":{},"code":175,"comments":65}},{"name":"./o/sc/add-demon.sh","stats":{"blanks":2,"blobs":{},"code":12,"comments":1}},{"name":"./o/sc/fuzz.sh","stats":{"blanks":6,"blobs":{},"code":27,"comments":3}},{"name":"./o/sc/rust_docs_bootstrap_frontend.sh","stats":{"blanks":14,"blobs":{},"code":72,"comments":2}},{"name":"./sc/archiso/mkinit-linux.sh","stats":{"blanks":1,"blobs":{},"code":15,"comments":7}},{"name":"./sc/archiso/first-run.sh","stats":{"blanks":1,"blobs":{},"code":1,"comments":2}},{"name":"./sc/archiso/test.sh","stats":{"blanks":6,"blobs":{},"code":26,"comments":21}},{"name":"./o/sc/arch-chroot.sh","stats":{"blanks":11,"blobs":{},"code":45,"comments":6}},{"name":"./sc/install.sh","stats":{"blanks":81,"blobs":{},"code":459,"comments":72}},{"name":"./sc/archiso/mkinit.sh","stats":{"blanks":45,"blobs":{},"code":175,"comments":65}},{"name":"./o/sc/install.sh","stats":{"blanks":81,"blobs":{},"code":459,"comments":74}}]},"TOML":{"blanks":7,"children":{},"code":48,"comments":2,"inaccurate":false,"reports":[{"name":"./sc/rustfmt.toml","stats":{"blanks":0,"blobs":{},"code":3,"comments":0}},{"name":"./sc/Cargo.toml","stats":{"blanks":7,"blobs":{},"code":45,"comments":2}}]},"Total":{"blanks":1398,"children":{"Elisp":[{"name":"./babel.el","stats":{"blanks":26,"blobs":{},"code":148,"comments":40}},{"name":"./sc/lisp/shed.el","stats":{"blanks":33,"blobs":{},"code":199,"comments":46}},{"name":"./o/sc/elisp/publish.el","stats":{"blanks":3,"blobs":{},"code":47,"comments":0}}],"Haskell":[{"name":"./sc/monads.hs","stats":{"blanks":3,"blobs":{},"code":13,"comments":5}},{"name":"./o/sc/monads.hs","stats":{"blanks":3,"blobs":{},"code":13,"comments":5}}],"Makefile":[{"name":"./makefile","stats":{"blanks":4,"blobs":{},"code":7,"comments":1}},{"name":"./sc/makefile","stats":{"blanks":8,"blobs":{},"code":9,"comments":2}}],"Org":[{"name":"./lob.org","stats":{"blanks":48,"blobs":{},"code":581,"comments":9}},{"name":"./sc/cv.org","stats":{"blanks":4,"blobs":{},"code":81,"comments":0}},{"name":"./sc/index.org","stats":{"blanks":8,"blobs":{},"code":88,"comments":0}},{"name":"./readme.org","stats":{"blanks":11,"blobs":{},"code":56,"comments":1}},{"name":"./sc/readme.org","stats":{"blanks":25,"blobs":{},"code":214,"comments":2}},{"name":"./sc/m.org","stats":{"blanks":85,"blobs":{},"code":990,"comments":1}},{"name":"./o/lob.org","stats":{"blanks":29,"blobs":{},"code":316,"comments":11}},{"name":"./sc/n.org","stats":{"blanks":344,"blobs":{},"code":5128,"comments":26}}],"PowerShell":[{"name":"./sc/powershell/win-dlx-bitsadmin.ps1","stats":{"blanks":0,"blobs":{},"code":1,"comments":1}},{"name":"./sc/powershell/win-dlbin64-certutil.ps1","stats":{"blanks":0,"blobs":{},"code":1,"comments":1}},{"name":"./sc/powershell/nbd-firewall-rule.ps1","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}},{"name":"./o/sc/powershell/win-dlx-bitsadmin.ps1","stats":{"blanks":0,"blobs":{},"code":1,"comments":1}},{"name":"./o/sc/powershell/win-dlbin64-certutil.ps1","stats":{"blanks":0,"blobs":{},"code":1,"comments":1}},{"name":"./o/sc/powershell/nbd-firewall-rule.ps1","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}}],"Python":[{"name":"./sc/sm_scrape.py","stats":{"blanks":9,"blobs":{},"code":34,"comments":2}},{"name":"./sc/hackrf.py","stats":{"blanks":33,"blobs":{},"code":123,"comments":17}},{"name":"./sc/org.py","stats":{"blanks":11,"blobs":{},"code":48,"comments":1}},{"name":"./o/sc/org.py","stats":{"blanks":11,"blobs":{},"code":48,"comments":1}},{"name":"./sc/fm_radio_rx.py","stats":{"blanks":20,"blobs":{},"code":166,"comments":15}},{"name":"./o/sc/fm_radio_rx.py","stats":{"blanks":20,"blobs":{},"code":166,"comments":15}},{"name":"./o/sc/sm_scrape.py","stats":{"blanks":9,"blobs":{},"code":34,"comments":2}},{"name":"./o/sc/hackrf.py","stats":{"blanks":33,"blobs":{},"code":123,"comments":17}},{"name":"./sc/build-efi.py","stats":{"blanks":29,"blobs":{},"code":63,"comments":18}},{"name":"./o/sc/build-efi.py","stats":{"blanks":29,"blobs":{},"code":63,"comments":18}}],"Rust":[{"name":"./sc/src/coding.rs","stats":{"blanks":6,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":30,"comments":4}},{"name":"./sc/src/web/client.rs","stats":{"blanks":1,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":4}},"code":7,"comments":5}},{"name":"./sc/src/web/server.rs","stats":{"blanks":3,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":4}},"code":26,"comments":5}},{"name":"./sc/src/crypto.rs","stats":{"blanks":0,"blobs":{},"code":0,"comments":0}},{"name":"./sc/src/store.rs","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}},{"name":"./sc/src/stash.rs","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}},{"name":"./sc/src/daemon.rs","stats":{"blanks":2,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":11,"comments":0}},{"name":"./sc/src/lib.rs","stats":{"blanks":4,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":7,"comments":17}},{"name":"./sc/src/bin/shk.rs","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}},{"name":"./sc/src/bin/shx.rs","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}},{"name":"./sc/src/bin/shs.rs","stats":{"blanks":1,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":6,"comments":0}},{"name":"./sc/src/bin/shd.rs","stats":{"blanks":1,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":6,"comments":0}},{"name":"./sc/src/bin/shc.rs","stats":{"blanks":3,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":10,"comments":1}},{"name":"./sc/build.rs","stats":{"blanks":4,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":20,"comments":7}},{"name":"./sc/src/web.rs","stats":{"blanks":11,"blobs":{"Markdown":{"blanks":1,"blobs":{},"code":0,"comments":14}},"code":94,"comments":0}},{"name":"./sc/src/config.rs","stats":{"blanks":7,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":2}},"code":78,"comments":0}},{"name":"./sc/src/cli.rs","stats":{"blanks":0,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":1}},"code":165,"comments":0}},{"name":"./sc/src/app.rs","stats":{"blanks":18,"blobs":{"Markdown":{"blanks":0,"blobs":{},"code":0,"comments":14}},"code":425,"comments":12}}],"Sh":[{"name":"./sc/check_term_colors.sh","stats":{"blanks":0,"blobs":{},"code":6,"comments":1}},{"name":"./sc/setup-monitors.sh","stats":{"blanks":0,"blobs":{},"code":1,"comments":1}},{"name":"./sc/hg-export-bundle.sh","stats":{"blanks":1,"blobs":{},"code":8,"comments":2}},{"name":"./sc/set_bg.sh","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}},{"name":"./sc/arch-chroot.sh","stats":{"blanks":11,"blobs":{},"code":45,"comments":6}},{"name":"./sc/hg-export-github.sh","stats":{"blanks":1,"blobs":{},"code":12,"comments":6}},{"name":"./sc/wg-gen-keys.sh","stats":{"blanks":0,"blobs":{},"code":2,"comments":2}},{"name":"./sc/set-version.sh","stats":{"blanks":5,"blobs":{},"code":18,"comments":5}},{"name":"./sc/port-scan.sh","stats":{"blanks":8,"blobs":{},"code":45,"comments":2}},{"name":"./sc/hg-unbundle.sh","stats":{"blanks":0,"blobs":{},"code":8,"comments":4}},{"name":"./sc/nfs-re-export.sh","stats":{"blanks":0,"blobs":{},"code":2,"comments":1}},{"name":"./sc/hg-pull.sh","stats":{"blanks":4,"blobs":{},"code":11,"comments":6}},{"name":"./sc/qemu-init-win10.sh","stats":{"blanks":0,"blobs":{},"code":11,"comments":8}},{"name":"./sc/record_gif.sh","stats":{"blanks":0,"blobs":{},"code":3,"comments":2}},{"name":"./sc/hg-bundle.sh","stats":{"blanks":6,"blobs":{},"code":25,"comments":5}},{"name":"./sc/gen_rust_docs.sh","stats":{"blanks":3,"blobs":{},"code":11,"comments":2}},{"name":"./sc/add-demon.sh","stats":{"blanks":2,"blobs":{},"code":12,"comments":1}},{"name":"./sc/fuzz.sh","stats":{"blanks":6,"blobs":{},"code":27,"comments":3}},{"name":"./o/sc/archiso/repoctl-upgrade.sh","stats":{"blanks":2,"blobs":{},"code":12,"comments":2}},{"name":"./o/sc/archiso/test.sh","stats":{"blanks":6,"blobs":{},"code":26,"comments":21}},{"name":"./o/sc/iso-write.sh","stats":{"blanks":0,"blobs":{},"code":3,"comments":1}},{"name":"./sc/pipes.sh","stats":{"blanks":45,"blobs":{},"code":256,"comments":83}},{"name":"./o/sc/wg-gen-keys.sh","stats":{"blanks":0,"blobs":{},"code":2,"comments":2}},{"name":"./sc/rust_docs_bootstrap_frontend.sh","stats":{"blanks":14,"blobs":{},"code":72,"comments":2}},{"name":"./o/sc/set-version.sh","stats":{"blanks":5,"blobs":{},"code":18,"comments":5}},{"name":"./o/sc/hg-unbundle.sh","stats":{"blanks":0,"blobs":{},"code":8,"comments":4}},{"name":"./o/sc/port-scan.sh","stats":{"blanks":8,"blobs":{},"code":45,"comments":2}},{"name":"./o/sc/archiso/first-run.sh","stats":{"blanks":1,"blobs":{},"code":1,"comments":2}},{"name":"./o/sc/archiso/provision.sh","stats":{"blanks":8,"blobs":{},"code":23,"comments":1}},{"name":"./o/sc/archiso/mkinit-linux.sh","stats":{"blanks":1,"blobs":{},"code":15,"comments":7}},{"name":"./o/sc/pipes.sh","stats":{"blanks":45,"blobs":{},"code":256,"comments":83}},{"name":"./o/sc/nfs-re-export.sh","stats":{"blanks":0,"blobs":{},"code":2,"comments":1}},{"name":"./o/sc/hg-pull.sh","stats":{"blanks":4,"blobs":{},"code":11,"comments":6}},{"name":"./o/sc/crater-export-github.sh","stats":{"blanks":1,"blobs":{},"code":10,"comments":2}},{"name":"./o/sc/qemu-init-win10.sh","stats":{"blanks":0,"blobs":{},"code":11,"comments":8}},{"name":"./o/sc/record_gif.sh","stats":{"blanks":0,"blobs":{},"code":3,"comments":2}},{"name":"./o/sc/hg-bundle.sh","stats":{"blanks":6,"blobs":{},"code":25,"comments":5}},{"name":"./o/sc/hg-export-bundle.sh","stats":{"blanks":1,"blobs":{},"code":8,"comments":2}},{"name":"./o/sc/connctl.sh","stats":{"blanks":2,"blobs":{},"code":7,"comments":1}},{"name":"./o/sc/check_term_colors.sh","stats":{"blanks":0,"blobs":{},"code":6,"comments":1}},{"name":"./o/sc/setup-monitors.sh","stats":{"blanks":0,"blobs":{},"code":1,"comments":1}},{"name":"./o/sc/set_bg.sh","stats":{"blanks":0,"blobs":{},"code":1,"comments":0}},{"name":"./o/sc/gen_rust_docs.sh","stats":{"blanks":3,"blobs":{},"code":11,"comments":2}},{"name":"./o/sc/archiso/mkinit.sh","stats":{"blanks":45,"blobs":{},"code":175,"comments":65}},{"name":"./o/sc/add-demon.sh","stats":{"blanks":2,"blobs":{},"code":12,"comments":1}},{"name":"./o/sc/fuzz.sh","stats":{"blanks":6,"blobs":{},"code":27,"comments":3}},{"name":"./o/sc/rust_docs_bootstrap_frontend.sh","stats":{"blanks":14,"blobs":{},"code":72,"comments":2}},{"name":"./sc/archiso/mkinit-linux.sh","stats":{"blanks":1,"blobs":{},"code":15,"comments":7}},{"name":"./sc/archiso/first-run.sh","stats":{"blanks":1,"blobs":{},"code":1,"comments":2}},{"name":"./sc/archiso/test.sh","stats":{"blanks":6,"blobs":{},"code":26,"comments":21}},{"name":"./o/sc/arch-chroot.sh","stats":{"blanks":11,"blobs":{},"code":45,"comments":6}},{"name":"./sc/install.sh","stats":{"blanks":81,"blobs":{},"code":459,"comments":72}},{"name":"./sc/archiso/mkinit.sh","stats":{"blanks":45,"blobs":{},"code":175,"comments":65}},{"name":"./o/sc/install.sh","stats":{"blanks":81,"blobs":{},"code":459,"comments":74}}],"Toml":[{"name":"./sc/rustfmt.toml","stats":{"blanks":0,"blobs":{},"code":3,"comments":0}},{"name":"./sc/Cargo.toml","stats":{"blanks":7,"blobs":{},"code":45,"comments":2}}]},"code":12248,"comments":933,"inaccurate":false,"reports":[]}}
#+end_src

** hg-summary
#+name: shc-hg-summary
#+begin_src sh :results output :var src="."
shc s -v $src
#+end_src
** org-current-h1-title
#+name: org-current-heading-title
#+begin_src emacs-lisp :results value
  (org-element-property :title (save-excursion (org-up-heading-safe) (org-element-at-point)))
#+end_src

** org-capture-stdout
#+name: org-capture-stdout
#+begin_src shell :tangle yes
  #!/bin/bash

  TITLE="$*"
  CONTENT="
       ,#+BEGIN_EXAMPLE
  $(cat | sed 's/^/     /g')
       ,#+END_EXAMPLE
  "

  if [[ -n $TITLE ]]
  then
      CONTENT="   - ${TITLE}\n${CONTENT}"
  fi

  /usr/local/bin/emacsclient -c -n \
                             -e "(progn (org-capture-string \"$CONTENT\" \"3\") (delete-frame))"
#+end_src

** org-task-tbl
#+name: org-task-tbl
#+begin_src emacs-lisp
  (let* ((ast (org-element-parse-buffer)) ;; built up the abstract syntax tree of the org buffer
         item-types ; all occuring item types. It could be that some task has more item types than another.
         tasks ; accumulation list for the tasks
         current-task ; name of the current task (header of level 1)
         task-items) ; items of the current task
    (org-element-map ast 'headline
      (lambda (hl)
        (cl-case (org-element-property :level hl)
          (1 ; We assume here that headers of level 1 are tasks.
           (when current-task ; registering the old task
             (setq tasks (cons (cons current-task (nreverse task-items)) tasks)))
           (setq current-task (org-element-property :raw-value hl) ; preparing the new task
                 task-items nil))
          (2 ; item
           (let ((item-type (org-element-property :raw-value hl)))
             (setq item-types (cons item-type item-types))
             (setq task-items (cons (cons item-type (org-element-property :todo-keyword hl))
                                    task-items)))))))
    (setq tasks (nreverse (cons (cons current-task (nreverse task-items)) tasks)) ;add the last task
          item-types (sort (cl-remove-duplicates (nreverse item-types) :test 'string-equal) ; list of unique item types
                           #'string<)) ;;Sorting the items lexicographical. Other criteria could be applied.
      ;;;;;;;;;;
    ;; generating the output table:
    (apply
     #'list
     (cons "Item" (mapcar #'car tasks)) ; header
     'hline
     ;; rows:
     (mapcar
      ;; mapping the items to the todo states associated to the tasks:
      (lambda (item-type)
        (cons item-type
              (mapcar
               (lambda (task)
                 (let ((todo-status (cdr (assoc-string item-type task))))
                   todo-status))
               tasks)))
      item-types)))
#+end_src

#+RESULTS: org-task-tbl
| Item               | snippet | skeleton | script |
|--------------------+---------+----------+--------|
| cargo-update-dir   | nil     | nil      | nil    |
| colsum-if          | nil     | nil      | nil    |
| cp-f               | nil     | nil      | nil    |
| dot-version        | nil     | nil      | nil    |
| env-table          | nil     | nil      | nil    |
| extract            | nil     | nil      | nil    |
| gen-dot-tree       | nil     | nil      | nil    |
| get-emacs-version  | nil     | nil      | nil    |
| get-env            | nil     | nil      | nil    |
| git-clone          | nil     | nil      | nil    |
| hg-clone           | nil     | nil      | nil    |
| hg-log-age         | nil     | nil      | nil    |
| hg-rev             | nil     | nil      | nil    |
| hg-summary         | nil     | nil      | nil    |
| http-server        | nil     | nil      | nil    |
| js-copy-link-id    | nil     | nil      | nil    |
| lab                | nil     | nil      | nil    |
| load-file          | nil     | nil      | nil    |
| make-demon         | nil     | nil      | nil    |
| make-dot-tree      | nil     | nil      | nil    |
| make-header        | nil     | nil      | nil    |
| make-list          | nil     | nil      | nil    |
| meta               | nil     | nil      | nil    |
| org-capture-stdout | nil     | nil      | nil    |
| org-headlines-map  | nil     | nil      | nil    |
| org-task-tbl       | nil     | nil      | nil    |
| os                 | nil     | nil      | nil    |
| python             | nil     | nil      | nil    |
| rand               | nil     | nil      | nil    |
| rust               | nil     | nil      | nil    |
| rust-target-triple | nil     | nil      | nil    |
| sh-ob-tangle       | nil     | nil      | nil    |
| shc-weather        | nil     | nil      | nil    |
| sys                | nil     | nil      | nil    |
| term-check         | nil     | nil      | nil    |
| tokei-json         | nil     | nil      | nil    |
| virt               | nil     | nil      | nil    |
| wc-dir-lines       | nil     | nil      | nil    |
| wc-dir-words       | nil     | nil      | nil    |
| wg-keygen          | nil     | nil      | nil    |
| ytdl               | nil     | nil      | nil    |

** shc-weather
print a quick forecast
#+name: shc-weather
#+begin_src sh :results output
shc s -w
#+end_src

** sh-ob-tangle
#+name: sh-ob-tangle
#+begin_src sh
  emacs -Q --batch --eval "
      (progn
	(require 'ob-tangle)
	(dolist (file command-line-args-left)
	  (with-current-buffer (find-file-noselect file)
	    (org-babel-tangle))))
    " "$@"
#+end_src
** wc-dir-lines
#+name: wc-dir-lines
#+begin_src shell :var dir="."
cd $dir && cat * | wc -l
#+end_src

** wc-dir-words
#+name: wc-dir-words
#+begin_src shell :var dir="."
cd $dir && cat * | wc -w
#+end_src
** env-table
#+name: env-table
#+begin_src sh :results silent
  for i in $(env);
  do
      echo "$i" | sed '0,/=/s//|/'
  done
#+end_src
** get-env
#+name: get-env
#+begin_src elisp :results silent :var key=""
(getenv key)
#+end_src
** org-headlines-map
#+name: org-headlines-map
#+begin_src elisp
  (org-element-map (org-element-parse-buffer 'headline )
      'headline
    (lambda(hl)
      (let ((parent (org-element-property :parent hl )))
        (and (eq (org-element-type parent) 'headline)
             (list (org-element-property :title parent) (org-element-property :title hl))))))

#+end_src

#+RESULTS: org-headlines-map
| sn                 | rs                 |
| rs                 | rust_target_triple |
| rust_target_triple | util               |
| rust_target_triple | demon              |
| sn                 | mk                 |
| mk                 | mk_header          |
| sn                 | js                 |
| js                 | copy-link-id       |
| sn                 | sh                 |
| sh                 | extract            |
| sh                 | git-clone          |
| sh                 | hg-clone           |
| sh                 | hg-rev             |
| sh                 | hg-summary         |
| sh                 | shc-weather        |
| sh                 | sh-ob-tangle       |
| sn                 | elisp              |
| elisp              | org-headlines-map  |
| elisp              | get-emacs-version  |
| elisp              | colsum-if          |
| elisp              | load-file          |
| elisp              | cp-f               |
| sn                 | py                 |
| sn                 | C                  |
| sn                 | dot                |
| dot                | dot-version        |
| dot                | make-dot-tree      |
| dot                | gen-dot-tree       |
| skel               | rust               |
| rust               | bin                |
| bin                | Cargo.toml         |
| bin                | rustfmt.toml       |
| bin                | src/main.rs        |
| rust               | lib                |
| lib                | Cargo.toml         |
| lib                | src/lib.rs         |
| rust               | mod-bin            |
| mod-bin            | Cargo.toml         |
| mod-bin            | main.rs            |
| rust               | mod-lib            |
| mod-lib            | Cargo.toml         |
| mod-lib            | lib.rs             |
| rust               | app                |
| app                | Cargo.toml         |
| app                | src/main.rs        |
| skel               | lab                |
| lab                | rust-fu            |
| lab                | sh-fu              |
| lab                | windows-10-vm      |
| lab                | archlinux-vm       |
| skel               | python             |
| sc                 | sh                 |
| sh                 | ytdl               |
| sh                 | cargo-update-dir   |
| sh                 | wg-keygen          |
| sh                 | rand               |
| sh                 | term-check         |
| sh                 | virt               |
| virt               | qemu               |
| sh                 | sys                |
| sys                | systemd            |
| sys                | inotify            |
| sh                 | os                 |
| os                 | macos              |
| sc                 | py                 |
| py                 | http-server        |

** get-emacs-version
#+name: get-emacs-version
#+begin_src elisp :results output
  (princ (concat (format "%s\n" (emacs-version))
		 (format "Org v%s" (org-version))))
#+end_src
** colsum-if
sum values in vallist if the corresponding key matches the keymatch
argument
#+name: colsum-if
#+begin_src elisp :var keylist=() vallist=() keymatch=()
  (cl-loop for key in keylist
	   for val in vallist
	   when (equal key keymatch)
	   sum (string-to-number val))
#+end_src
** load-file
#+name: load-file
#+begin_src elisp :var file=()
(load-file file)
#+end_src
** cp-f
#+name: cp-f
#+begin_src elisp :var in="file" out="path"
(copy-file in out)
#+end_src
** dot-version
#+begin_src sh
dot -V 2>&1
#+end_src

#+RESULTS:
: dot - graphviz version 2.49.2 (0)

** make-dot-tree
#+name: make-dot-tree
#+begin_src emacs-lisp :var table=org-headlines-map :results output
  (mapcar #'(lambda (x)
		(princ (format "\"%s\" -> \"%s\";\n" (cl-first x) (cl-second x))))
	  table)
#+end_src

#+RESULTS: make-dot-tree
#+begin_example
"sn" -> "rs";
"rs" -> "rust_target_triple";
"rust_target_triple" -> "util";
"rust_target_triple" -> "demon";
"rs" -> "macro";
"sn" -> "mk";
"mk" -> "mk_header";
"sn" -> "js";
"js" -> "copy-link-id";
"sn" -> "sh";
"sh" -> "extract";
"sn" -> "org";
"sn" -> "elisp";
"elisp" -> "get-emacs-version";
"elisp" -> "colsum-if";
"elisp" -> "org-headlines-map";
"sn" -> "py";
"sn" -> "c";
"sn" -> "cpp";
"sn" -> "dot";
"dot" -> "dot-version";
"dot" -> "make-dot-tree";
"dot" -> "gen-dot-tree";
"tm" -> "rust";
"rust" -> "bin";
"bin" -> "Cargo.toml";
"bin" -> "rustfmt.toml";
"bin" -> "src/main.rs";
"rust" -> "lib";
"lib" -> "Cargo.toml";
"lib" -> "src/lib.rs";
"rust" -> "mod-bin";
"mod-bin" -> "Cargo.toml";
"mod-bin" -> "main.rs";
"rust" -> "mod-lib";
"mod-lib" -> "Cargo.toml";
"mod-lib" -> "lib.rs";
"rust" -> "app";
"app" -> "Cargo.toml";
"app" -> "src/main.rs";
"tm" -> "org";
"org" -> "babel";
"tm" -> "python";
"sc" -> "sh";
"sh" -> "app";
"sh" -> "dev";
"dev" -> "cargo";
"sh" -> "crypto";
"sh" -> "rand";
"sh" -> "term";
"sh" -> "virt";
"virt" -> "qemu";
"sh" -> "sys";
"sys" -> "systemd";
"sys" -> "inotify";
"sh" -> "os";
"os" -> "macos";
"sc" -> "py";
"py" -> "net";
#+end_example

** gen-dot-tree
#+name: gen-dot-tree
#+begin_src dot :file /tmp/tree.png :cmdline -Kdot -Tpng :var input=make-dot-tree
digraph {
   rankdir=TB;
   splines=true;
   node [shape=box];
   $input
  }
#+end_src

#+RESULTS: gen-dot-tree
[[file:/tmp/tree.svg]]

* skeleton
** rust
*** bin
**** Cargo.toml
#+begin_src toml :var name=""
[package]
name = "$name"
version = "0.1.0"
edition = "2021"

[dependencies]
#+end_src
**** rustfmt.toml
#+begin_src toml
edition = "2021"
reorder_imports = true
reorder_modules = true
tab_spaces = 2
use_field_init_shorthand = true
use_try_shorthand = true
#+end_src
**** src/main.rs
#+begin_src rust
fn main() {
  
}
#+end_src
*** lib
**** Cargo.toml
#+begin_src toml :var name="_lib"
[package]
name = "$name"
version = "0.1.0"
edition = "2021"

[dependencies]
#+end_src
**** src/lib.rs
#+begin_src rust
#+end_src
*** mod-bin
**** Cargo.toml
#+begin_src toml :var name="_mod"
[package]
name = "$name"
version = "0.1.0"
edition = "2021"

[[bin]]
path = "main.rs"

[dependencies]
#+end_src
**** main.rs
#+begin_src rust
fn main() {}
#+end_src
*** mod-lib
**** Cargo.toml
#+begin_src toml :var name="_mod"
[package]
name = "$name"
version = "0.1.0"
edition = "2021"

[[lib]]
path = "lib.rs"

[dependencies]
#+end_src
**** lib.rs
#+begin_src rust
#+end_src
*** app
**** Cargo.toml
#+begin_src toml :var name="_app"
[package]
name = "$name"
version = "0.1.0"
edition = "2021"

[dependencies]
rlib = "0.1.0"
tenex = "0.1.0"
#+end_src
**** src/main.rs
#+begin_src rust
use rlib::ctx;

#[ctx::main]
async fn main() {}
#+end_src
** lab
*** rust-fu
#+name: rust-fu
#+begin_src elisp
#+end_src
*** sh-fu
#+name: sh-fu
#+begin_src elisp
#+end_src
*** windows-10-vm
*** archlinux-vm
** python
* script
** meta

** ytdl
#+name: ytdl
#+begin_src sh :var OUT_PATH=""
youtube-dl --no-warnings \
  -o '$OUT_PATH/%(title)s.%(ext)s' \
  --socket-timeout 15 --hls-use-mpegts -R 64 --fragment-retries 64 \
  --prefer-free-formats --all-subs --embed-subs \
  -f 'bestvideo[height<=1080]+bestaudio/best[height<=1080]' "$@" \
  --restrict-filenames
#+end_src

** cargo-update-dir
#+name: cargo-update-dir
#+begin_src sh :var dir=()
# update all crates in dir
set -eu
case $0 in
   (/*) dir=${0%/*}/;;
   (*/*) dir=./${0%/*};;
   (*) dir=.;;
esac

find "$dir/.." -name Cargo.lock -execdir cargo update \;
#+end_src

#+RESULTS: cargo_update_dir

** wg-keygen
generate base64-enc keypair in current dir
#+name: wg-keygen
#+begin_src sh

umask 077
wg genkey | tee privatekey | wg pubkey > publickey
#+end_src
** rand
#+name: urand_4k_file
#+begin_src sh
# create 4k of random bytes in file
dd if=/dev/urandom of=$@ count=4 bs=1024
#+end_src

#+name: urand_stdout
#+begin_src sh
# generate random numbers to stdout
od -d /dev/urandom
#+end_src

#+name: urand-sha512
#+begin_src sh
# generate hash of 128 random bytes
dd if=/dev/urandom  count=1 bs=128 | sha512sum
#+end_src
** term-check
#+name: term-check
#+begin_src sh
stty -a #current settings of all terminal attributes
bind -p #key bindings
infocmp #print out a terminfo description
#+end_src

#+RESULTS: term-check

** virt
#+name: dd_write_iso
#+begin_src sh :var iso="" :var disk=""
dd bs=4M if=$iso of=$disk conv=fdatasync status=progress
#+end_src
*** qemu
#+name: qemu_init_win10
#+begin_src sh :var boot="win10_x64.iso" :var virt="win10.iso" :var disk="win10.img"
# this script requires an installation ISO (win10_x64.iso), the
# virtio-windows-guest drivers (win10.iso), and a fresh disk image to
# install to (win10.img).
#
# the graphic installer will boot and you then need to load the virtio
# drivers, at which point you can install as usual.
exec qemu-system-x86_64 -enable-kvm \
        -cpu host \
        -cdrom $boot \
        -drive file=$virt,if=virtio \
        -drive file=$disk,index=1,media=cdrom \
        -net nic,model=virtio -net user \
        -vga qxl \
        -m 4G \
        -monitor stdio \
        -name "Windows" \
        "$@"
#+end_src

** sys
*** systemd
#+name: systemctl_list_units
#+begin_src sh
systemctl list-units --state=running | grep -v systemd | awk '{print $1}' | grep service
#+end_src
*** inotify
#+name: inotify-watch-dir
#+begin_src sh :var dir="."
inotifywait -m  $path -e create -e moved_to |
    while read dir action file; do
	echo "The file '$file' appeared in directory '$dir' via '$action'"
    done
#+end_src
** os
*** macos
#+name: macos_init
#+begin_src sh
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew install openssl cmake
curl https://sh.rustup.rs -sSf | sh
source ~/.cargo/env
#+end_src
** http-server
#+name: http-server
#+begin_src python
from http.server import HTTPServer, SimpleHTTPRequestHandler, test
import sys

class RequestHandler(SimpleHTTPRequestHandler):
    def end_headers(self):
        self.send_header('Cross-Origin-Opener-Policy', 'same-origin')
        self.send_header('Cross-Origin-Embedder-Policy', 'require-corp')
        SimpleHTTPRequestHandler.end_headers(self)

if __name__ == '__main__':
    test(RequestHandler, HTTPServer, port=int(sys.argv[1]) if len(sys.argv) > 1 else 8000)
#+end_src
