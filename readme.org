# Created 2021-11-06 Sat 21:33
#+title: babel
#+author: ellis
- what ← scripts[sc], snippets[sn], and templates[tm]
- status ← IN_PROGRESS
- [[https://hg.rwest.io/babel][src]] ⇐

Re-using code is an important part of software development. We re-use
code when importing a library module, using macros, writing classes,
and [[https://stackoverflow.blog/2021/04/19/how-often-do-people-actually-copy-and-paste-from-stack-overflow-now-we-know/][copying code from Stack Overflow]]. As such, programmers have often
come up with systems for collecting code that they can re-use in other
contexts.

=babel= is one of these systems. It is highly integrated with [[#shed][shed]] and
[[file:n.org::#gnu-emacs][GNU Emacs]] which are used to modify, organize, and implement our
collections.

Collections are described by three categories:
- sn :: common domain-specific code snippets
- sc :: generalized scripts in a variety of languages
- tm :: project templates

Each category provides its own methods of interaction available to the
user for different types of meta-programming activities. There are
also high-level interfaces for composing ephemerial hacking sessions
and configuration.

This project is an extension of the [[https://orgmode.org/manual/Library-of-Babel.html][Library of Babel]] - which allows
you to define blocks of code in an org file, and call them
remotely. =babel= is in fact just this - a collection of code blocks
in an org file. Emacs was previously distributed with an initial
collection; [[https://git.sr.ht/~bzg/worg/tree/master/item/library-of-babel.org][library-of-babel.org]]. This is no longer the case, but the
powerful functionality of =org-babel= is still there, in all its
glory.

The goal of =babel= however is not just to build collections, but to
provide APIs for them. As such a large focus of this project will be
on exporting (i.e. [[id:b297c4d5-9d42-4618-9ab6-e8134d7587a0][Weaving and Tangling]]) and parsing collections built
in Emacs so that they can be used by other processes. Our intention is
to mimick the powerful meta-programming capabilities of =org-babel=
(specifically, the ability to mix and match functions /from any
language/).

* Literate Programming
Literate programming was first introduced by Donald Knuth in 1984 via
his documentation and programming system =WEB=. The approach involves
writing the logic of a program in /natural language/ interspersed with
snippets, macros, and other source code, from which a compilable
computer program can be generated.

The concept can be applied widely but is typically reserved for the
domains of Academia/Research, where it is a popular method of creating
reproducible research.

Knuth's =WEB= was originally built for Pascal + LaTex *only*, but in
1989 a new language-agnostic tool called =noweb= was released. This
model, that is capable of working with multiple programming languages
and documentation backends, is what we commonly refer to as Literate
Programming today.

** Weaving and Tangling
[[https://rwest.io/a/img/literate_c.jpg]]

Weaving and Tangling are the core operations that are performed on
some raw source, which should include both prose and code. The raw
source is written in =org= in our case, but the same concepts apply to
other mediums.

LP tools are used to perform these two operations.

- *Weaving* is associated with the /publishing/ and /exporting/
  pipeline for the source, which is meant to enhance the
  human-readable aspects.

- *Tangling* is associated with the /compilation/ nand /build/ pipeline
  for source. It creates machine-friendly artifacts which can be
  distributed for use by tools and services.

* Dependencies
- *Emacs 28* \\
  The editor integration doesn't depend on any external packages
  outside of vanilla Emacs. The following built-in packages are used
  to provide functionality:
  - =org.el=
  - =ob.el=
  - =skeleton.el=
  - =autoinsert.el=
  - =abbrev.el=
  - =dabbrev.el=
  All of the above features should be available in the default Emacs
  distribution for your OS.
- *GNU Make* \\
  =optional=

* Example
