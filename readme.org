# Created 2021-11-19 Fri 04:48
#+title: babel
This project is an extension of the [[https://orgmode.org/manual/Library-of-Babel.html][Library of Babel]] - which allows
you to define blocks of code in an org file, and call them remotely
(from elsewhere within Emacs). Emacs was previously distributed with
an initial collection; [[https://git.sr.ht/~bzg/worg/tree/master/item/library-of-babel.org][library-of-babel.org]]. This is no longer the
case, but the powerful functionality of =org-babel= is still there.

=babel.el= is the core package for this library. It includes a few
extensions to built-in packages, a minor-mode, and a framework for
using code blocks in various contexts. More on that later.

#+results: 
| info    |                                                                                                                         |
|---------+-------------------------------------------------------------------------------------------------------------------------|
| name    | [[https://rwest.io/m#babel][babel]]                                                                                     |
| version | alpha-0.1                                                                                                               |
| vc      | [[https://hg.rwest.io/babel/rev/fc31b7ffb5b2][75+:fc31b7ffb5b2]], [[https://github.com/richardwesthaver/babel][github]] |
| updated | 26 hours ago                                                                                                            |
| lines   | 6929 = Î»:4712 #:805 _:829                                                                                               |
| langs   | (Elisp Haskell Makefile Org PowerShell Python Sh)                                                                       |
|---------+-------------------------------------------------------------------------------------------------------------------------|

* Literate Programming
Literate Programming (LP) was first introduced by Donald Knuth in 1984 via
his documentation and programming system =WEB=. The approach involves
writing the logic of a program in /natural language/ interspersed with
snippets, macros, and other source code, from which a compilable
computer program can be generated.

The concept can be applied widely but is typically reserved for the
domains of academia, where it is a popular method of creating
reproducible research.

Knuth's =WEB= was originally built for Pascal + LaTex /only/, but in
1989 a new language-agnostic tool called =noweb= was released. This
model, that is capable of working with multiple programming languages
and documentation backends, is what we commonly refer to as Literate
Programming today.

** Weaving and Tangling
[[https://rwest.io/a/img/literate_c.jpg]]

Weaving and Tangling are the core operations that are performed on
some raw source, which should include both prose and code. The raw
source is written in =org= in our case, but the same concepts apply to
other mediums such as Jupyter Notebooks.

the core functions of any LP system are =weave= and =tangle=.

- *Weaving* is associated with the /publishing/ and /exporting/
  pipeline for the source, which is meant to enhance the
  human-readable aspects. We =weave= an LP document into formats such
  as LaTex, HTML, and PDF for human consumption.

- *Tangling* is associated with the /compilation/ nand /build/
  pipeline for source. It creates raw source code files, sometimes
  with additional comments. These files are machine-readable and can
  be interpreted in the runtime of our choosing.

As it relates to our project =babel=, we are particularly interested
in the =tangle= function. I do enjoy a well-woven document and
reviewing LP code in that manner, and =babel= functions can be used to
compose LP documents which are in turn woven, but it doesn't play a
role in the implementation itself. Our focus is instead on
/ergonomics/, specifically for the programmer and the runtime
environment he finds himself in, which requires close attention to the
machine-readable formats of source blocks.

* Dependencies
- *Emacs 28* \\
  The editor integration doesn't depend on any external packages
  outside of vanilla Emacs. The following built-in packages are used:
  - =org.el=
  - =ob.el=
  - =skeleton.el=
  - =autoinsert.el=
  - =abbrev.el=
  - =dabbrev.el=
